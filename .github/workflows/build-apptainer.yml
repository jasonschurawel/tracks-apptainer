name: Build Apptainer Container

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-apptainer:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Install Apptainer
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        cd /tmp
        wget https://github.com/apptainer/apptainer/releases/download/v1.2.5/apptainer_1.2.5_amd64.deb
        sudo apt-get install -y ./apptainer_1.2.5_amd64.deb

    - name: Build Docker and Apptainer using Makefile
      run: |
        # Use the existing Makefile build system
        echo "3" | make build  # Option 3: Build both Docker and Apptainer
        
    - name: Push Docker image to registry
      run: |
        # Tag and push the built Docker image
        docker tag tracks-apptainer_web:latest ${{ steps.meta.outputs.tags | head -n1 }}
        docker push ${{ steps.meta.outputs.tags | head -n1 }}

    - name: Test Apptainer container
      run: |
        # Quick test to ensure the container was built successfully
        apptainer exec tracks_apptainer.sif ls /app
        apptainer exec tracks_apptainer.sif bundle --version

    - name: Get container info
      id: container_info
      run: |
        SIZE=$(du -h tracks_apptainer.sif | cut -f1)
        echo "size=$SIZE" >> $GITHUB_OUTPUT
        echo "Container size: $SIZE"

    - name: Upload container as artifact
      uses: actions/upload-artifact@v4
      with:
        name: tracks-apptainer-${{ github.sha }}
        path: tracks_apptainer.sif
        retention-days: 30

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: tracks_apptainer.sif
        body: |
          ## Tracks GTD Apptainer Container
          
          This release includes a pre-built Apptainer container for the Tracks GTD application.
          
          ### Container Details
          - **Size**: ${{ steps.container_info.outputs.size }}
          - **Format**: Apptainer/Singularity SIF
          - **Database**: SQLite (embedded)
          - **Admin user**: admin/admin
          
          ### Usage
          ```bash
          # Download and run
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/tracks_apptainer.sif
          apptainer run tracks_apptainer.sif
          ```
          
          ### SLURM Integration
          ```bash
          # Submit as SLURM job
          sbatch --wrap="apptainer run tracks_apptainer.sif"
          
          # Interactive session
          srun --pty apptainer shell tracks_apptainer.sif
          ```
          
          The application will be available at http://localhost:3000
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update README with latest release info (on main/master)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        echo "Latest container built successfully!"
        echo "Size: ${{ steps.container_info.outputs.size }}"
        echo "Available as artifact: tracks-apptainer-${{ github.sha }}"
